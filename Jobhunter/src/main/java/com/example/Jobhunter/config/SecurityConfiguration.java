package com.example.Jobhunter.config;

import java.util.Base64;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.Spring;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint;
import org.springframework.security.oauth2.server.resource.web.access.BearerTokenAccessDeniedHandler;
import org.springframework.security.web.SecurityFilterChain;

import com.example.Jobhunter.util.SecurityUtil;
import com.nimbusds.jose.jwk.source.ImmutableSecret;
import com.nimbusds.jwt.JWT;

import io.micrometer.core.instrument.config.validate.Validated.Secret;

import org.springframework.security.config.http.SessionCreationPolicy;

@Configuration
@EnableMethodSecurity(securedEnabled = true)
public class SecurityConfiguration {

    @Value("${hoidanit.jwt.base64-secret}")
    private String jwtkey;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // N·∫°p CustomAuthenticationEntryPoint l√† ƒë·ªÉ custom l·∫°i th√¥ng b√°o l·ªói 401
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http,
            CustomAuthenticationEntryPoint customAuthenticationEntryPoint) throws Exception {
        http
                .csrf(c -> c.disable())
                .authorizeHttpRequests(
                        authz -> authz
                                .requestMatchers("/", "login").permitAll()
                                .anyRequest().authenticated()
                // .anyRequest().permitAll()

                )
                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults())

                        .authenticationEntryPoint(customAuthenticationEntryPoint)

                )

                .exceptionHandling(
                        exceptions -> exceptions
                                .authenticationEntryPoint(new BearerTokenAuthenticationEntryPoint()) // 401
                                .accessDeniedHandler(new BearerTokenAccessDeniedHandler())) // 403

                .formLogin(f -> f.disable()) // T·∫Øt form login
                // B·∫≠t session v√† n√≥i v·ªõi n√≥ x√†i stateless trong khi ƒë√≥ m·∫∑c ƒë·ªãnh n√≥ l√† stateful
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
        return http.build();
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //üëâ Bi·∫øn m·ªôt JWT h·ª£p l·ªá (sau khi decode) th√†nh m·ªôt Authentication object m√† Spring Security hi·ªÉu.
    //JwtAuthenticationConverter = C·∫ßu n·ªëi gi·ªØa JWT v√† Spring Security Authentication. 
    
    // Sau khi JwtDecoder x√°c th·ª±c token h·ª£p l·ªá, Spring c·∫ßn bi·∫øt user n√†y c√≥ quy·ªÅn
    // g√¨ ƒë·ªÉ cho ph√©p v√†o API.
    // Spring t·∫°o ra m·ªôt Authentication object ‚Üí n√≥ ch·ª©a:
    // principal (user id, username, email...)
    // authorities (c√°c quy·ªÅn: USER, ADMIN, READ, WRITE...)

    // üëâ M√† quy·ªÅn n√†y Spring ph·∫£i l·∫•y t·ª´ payload c·ªßa JWT.
    // N·∫øu  d√πng claim m·∫∑c ƒë·ªãnh "scope" ho·∫∑c "scp", th√¨ kh√¥ng c·∫ßn config g√¨ c·∫£.
    // N·∫øu  l∆∞u role ·ªü claim "hoidanit" (theo code c·ªßa ) ‚Üí Spring kh√¥ng t·ª±
    // bi·∫øt ‚Üí c·∫ßn JwtAuthenticationConverter ƒë·ªÉ ch·ªâ cho n√≥.

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() { //N√≥ t·∫°o ra m·ªôt JwtAuthenticationConverter v√† ƒë∆∞a v√†o Spring Context ƒë·ªÉ Spring Security d√πng khi x·ª≠ l√Ω JWT.
        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter(); //Th·∫±ng n√†y chuy√™n d√πng ƒë·ªÉ ƒë·ªçc c√°c claim trong JWT v√† chuy·ªÉn th√†nh danh s√°ch quy·ªÅn (GrantedAuthority).

        //üëâ M·∫∑c ƒë·ªãnh Spring th√™m ti·ªÅn t·ªë "SCOPE_" tr∆∞·ªõc m·ªói quy·ªÅn.
        // V√≠ d·ª•: "scope": "read" ‚Üí th√†nh ["SCOPE_read"].
        // ·ªû ƒë√¢y b·∫°n set th√†nh chu·ªói r·ªóng "" ‚Üí nghƒ©a l√† kh√¥ng th√™m prefix.
        // V√≠ d·ª•: "ADMIN" trong token ‚Üí gi·ªØ nguy√™n "ADMIN", kh√¥ng b·ªã th√†nh "SCOPE_ADMIN".
        grantedAuthoritiesConverter.setAuthorityPrefix("");

        // üëâ M·∫∑c ƒë·ªãnh Spring ch·ªâ ƒë·ªçc quy·ªÅn t·ª´ claim "scope" ho·∫∑c "scp".
        // Nh∆∞ng JWT c·ªßa b·∫°n ch·ª©a roles trong claim "hoidanit".

        // V√≠ d·ª• payload JWT c·ªßa :
        // {
        //   "sub": "user123",
        //   "hoidanit": ["ADMIN", "USER"]
        // }
        // ‚Üí D√≤ng n√†y b·∫£o Spring: h√£y l·∫•y quy·ªÅn t·ª´ claim "hoidanit".
        grantedAuthoritiesConverter.setAuthoritiesClaimName("hoidanit");

        //üëâ T·∫°o m·ªôt converter c·∫•p cao h∆°n (JwtAuthenticationConverter) ‚Üí n√≥ ch·ªãu tr√°ch nhi·ªám chuy·ªÉn Jwt th√†nh Authentication object.
        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);
        return jwtAuthenticationConverter;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // @FunctionalInterface

    // X√°c th·ª±c token h·ª£p l·ªá
    @Bean
    public JwtDecoder jwtDecoder() {
        NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withSecretKey(
                getSecretKey()).macAlgorithm(SecurityUtil.JWT_Algorithm).build(); // ‚Üí ch·ªâ ƒë·ªãnh secret key d√πng ƒë·ªÉ ki·ªÉm
                                                                                  // tra ch·ªØ k√Ω token.
        return token -> {
            try {
                return jwtDecoder.decode(token); // ‚Üí gi·∫£i m√£ token v√† ki·ªÉm tra ch·ªØ k√Ω.
            } catch (Exception e) {
                System.out.println(">>> JWT error: " + e.getMessage());
                throw e; // N·∫øu token kh√¥ng h·ª£p l·ªá / h·∫øt h·∫°n / b·ªã s·ª≠a ‚Üí n√©m exception v√† in log.
            }
        };
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // M·ª•c ƒë√≠ch: C·∫•u h√¨nh v√† cung c·∫•p m·ªôt ‚Äúm√°y m√£ h√≥a‚Äù (encoder) ƒë·ªÉ createToken s·ª≠
    // d·ª•ng.
    // NimbusJwtEncoder ch√≠nh l√† c√°i th∆∞ vi·ªán th·ª±c hi·ªán vi·ªác k√Ω s·ªë JWT b·∫±ng secret
    // key.
    // N√≥ c·∫ßn c√≥ SecretKey (t·∫°o t·ª´ jwtkey trong file c·∫•u h√¨nh).
    // Spring s·∫Ω qu·∫£n l√Ω bean JwtEncoder, ƒë·ªÉ khi g·ªçi jwtEncoder.encode(claims) th√¨
    // n√≥ bi·∫øt c√°ch m√£ h√≥a.
    @Bean
    public JwtEncoder jwtEncoder() {

        // NimbusJwtEncoder ch√≠nh l√† ‚Äúm√°y t·∫°o JWT‚Äù (JWT Encoder) ƒë∆∞·ª£c Spring Security
        // x√¢y d·ª±ng d·ª±a tr√™n th∆∞ vi·ªán m√£ h√≥a n·ªïi ti·∫øng Nimbus JOSE + JWT.
        // NimbusJwtEncoder c·∫ßn bi·∫øt Secret Key ƒë·ªÉ k√Ω JWT.
        // ImmutableSecret<>(getSecretKey()) ch√≠nh l√† c√°ch b·∫°n ƒë∆∞a c√°i key b√≠ m·∫≠t ƒë√≥
        // v√†o.

        return new NimbusJwtEncoder(new ImmutableSecret<>(getSecretKey()));
    }

    private SecretKey getSecretKey() {
        byte[] keyBytes = Base64.getDecoder().decode(jwtkey); // chuy·ªÉn secret t·ª´ d·∫°ng chu·ªói Base64 th√†nh m·∫£ng byte.
        return new SecretKeySpec(keyBytes, 0, keyBytes.length, SecurityUtil.JWT_Algorithm.getName()); // g√≥i m·∫£ng byte
                                                                                                      // th√†nh m·ªôt ƒë·ªëi
                                                                                                      // t∆∞·ª£ng
                                                                                                      // SecretKey, ch·ªâ
                                                                                                      // ƒë·ªãnh thu·∫≠t to√°n
                                                                                                      // (HS512).
    }

    // ƒêo·∫°n code n√†y ƒë·ªÉ t·∫°o v√† c·∫•u h√¨nh m·ªôt JwtEncoder (m√°y t·∫°o token). N√≥ s·∫Ω d√πng
    // secret key b·∫°n c·∫•u h√¨nh ƒë·ªÉ k√Ω JWT.
    // Sau n√†y trong h√†m createToken(Authentication authentication), b·∫°n g·ªçi
    // jwtEncoder.encode(...) ‚Üí token s·∫Ω sinh ra.
}